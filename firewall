#!/bin/bash
clear

echo -e "######################################################################################
#                                                                                    #
#                            Project 'RHQ - Firewall'                                #
#                                                                                    #
######################################################################################\n"

echo "Select an option:"
echo "1. Clear Firewall"
echo "2. List Firewall Rules"
echo "3. Restart Services"
echo "4. Setup Firewall"
echo "5. Quit"

read -p "Enter your choice: " choice </dev/tty

clear_firewall() {
    echo "Clearing Firewall..."
    sudo iptables -F
    sudo iptables -t nat -F
    sudo ip6tables -F
    sudo ip6tables -t nat -F
    sudo iptables -X
    sudo ip6tables -X
    sudo iptables -Z
    sudo ip6tables -Z
    echo "Firewall cleared successfully."
}

list_firewall() {
    echo "Listing Firewall Rules..."
    echo "IPv4 Rules:"
    sudo iptables -L -v -n
    echo -e "\nIPv6 Rules:"
    sudo ip6tables -L -v -n
}

restart_services() {
    read -p "Enter the services you want to restart: " services </dev/tty
    echo "The service/services $services will be restarted"
    sudo systemctl restart $services
    echo -e "\nThe service/services $services was/were restarted\n"
}

setup_firewall() {
    installpackages() {
        if ! dpkg -s "$1" &> /dev/null; then
            echo -e "$1 is not installed. Installing...\n"
            echo iptables-persistent iptables-persistent/autosave_v4 boolean true | sudo debconf-set-selections
            echo iptables-persistent iptables-persistent/autosave_v6 boolean true | sudo debconf-set-selections
            sudo apt-get install -y --no-install-recommends "$1"
            echo -e "$1 has been installed successfully.\n"
        else
            echo "$1 is already installed."
        fi
    }

    firewall_install() {
        # Flush existing rules
        sudo iptables -F
        sudo iptables -t nat -F
        sudo ip6tables -F
        sudo ip6tables -t nat -F
        sudo iptables -X
        sudo ip6tables -X
        sudo iptables -Z
        sudo ip6tables -Z

        # Set default policy to DROP
        sudo iptables -P INPUT DROP
        sudo iptables -P FORWARD DROP
        sudo iptables -P OUTPUT ACCEPT
        sudo ip6tables -P INPUT DROP
        sudo ip6tables -P FORWARD DROP
        sudo ip6tables -P OUTPUT ACCEPT

        # Allow established connections and loopback traffic
        sudo iptables -A INPUT -m conntrack --ctstate RELATED,ESTABLISHED -j ACCEPT
        sudo ip6tables -A INPUT -m conntrack --ctstate RELATED,ESTABLISHED -j ACCEPT
        sudo iptables -A INPUT -i lo -j ACCEPT
        sudo ip6tables -A INPUT -i lo -j ACCEPT

        # Drop invalid packets
        sudo iptables -A INPUT -m conntrack --ctstate INVALID -j DROP
        sudo ip6tables -A INPUT -m conntrack --ctstate INVALID -j DROP

        # Drop packets with suspicious TCP flags
        suspicious_flags=(
            "NONE" "FIN,SYN" "SYN,RST" "FIN,RST" "FIN,ACK" "ACK,URG"
            "ACK,FIN" "ACK,PSH" "ALL" "ALL,NONE" "ALL,FIN,PSH,URG"
            "ALL,SYN,FIN,PSH,URG" "ALL,SYN,RST,ACK,FIN,URG"
        )
        for flag in "${suspicious_flags[@]}"; do
            sudo iptables -A INPUT -p tcp --tcp-flags $flag -j DROP
            sudo ip6tables -A INPUT -p tcp --tcp-flags $flag -j DROP
        done

        # Drop fragmented packets
        sudo iptables -A INPUT -f -j DROP
        sudo ip6tables -A INPUT -m frag --fragid 0 -j DROP

        # Prevent SYN flood
        sudo iptables -A INPUT -p tcp --syn -m limit --limit 100/s --limit-burst 200 -j ACCEPT
        sudo iptables -A INPUT -p tcp --syn -j DROP
        sudo ip6tables -A INPUT -p tcp --syn -m limit --limit 100/s --limit-burst 200 -j ACCEPT
        sudo ip6tables -A INPUT -p tcp --syn -j DROP

        # Limit new connections
        sudo iptables -A INPUT -p tcp -m conntrack --ctstate NEW -m limit --limit 60/s --limit-burst 20 -j ACCEPT
        sudo iptables -A INPUT -p tcp -m conntrack --ctstate NEW -j DROP
        sudo ip6tables -A INPUT -p tcp -m conntrack --ctstate NEW -m limit --limit 60/s --limit-burst 20 -j ACCEPT
        sudo ip6tables -A INPUT -p tcp -m conntrack --ctstate NEW -j DROP

        # Detect port scanning
        sudo iptables -N port-scanning
        sudo iptables -A port-scanning -p tcp --tcp-flags SYN,ACK,FIN,RST RST -m limit --limit 1/s --limit-burst 2 -j LOG --log-prefix "Port Scan:"
        sudo iptables -A port-scanning -p tcp --tcp-flags SYN,ACK,FIN,RST RST -m limit --limit 1/s --limit-burst 2 -j RETURN
        sudo iptables -A port-scanning -j DROP
        sudo ip6tables -N port-scanning
        sudo ip6tables -A port-scanning -p tcp --tcp-flags SYN,ACK,FIN,RST RST -m limit --limit 1/s --limit-burst 2 -j LOG --log-prefix "Port Scan:"
        sudo ip6tables -A port-scanning -p tcp --tcp-flags SYN,ACK,FIN,RST RST -m limit --limit 1/s --limit-burst 2 -j RETURN
        sudo ip6tables -A port-scanning -j DROP

        # Layer 7 DDoS protection
        ddos_ports=(80 443)
        for port in "${ddos_ports[@]}"; do
            sudo iptables -N LAYER7_DDOS_$port
            sudo iptables -A LAYER7_DDOS_$port -p tcp --dport $port -m string --string "GET" --algo bm --to 65535 -j DROP
            sudo iptables -A LAYER7_DDOS_$port -p tcp --dport $port -m string --string "POST" --algo bm --to 65535 -j DROP
            sudo iptables -A LAYER7_DDOS_$port -p tcp --dport $port -m recent --name HTTP --update --seconds 60 --hitcount 50 -j DROP

            sudo ip6tables -N LAYER7_DDOS_$port
            sudo ip6tables -A LAYER7_DDOS_$port -p tcp --dport $port -m string --string "GET" --algo bm --to 65535 -j DROP
            sudo ip6tables -A LAYER7_DDOS_$port -p tcp --dport $port -m string --string "POST" --algo bm --to 65535 -j DROP
            sudo ip6tables -A LAYER7_DDOS_$port -p tcp --dport $port -m recent --name HTTP --update --seconds 60 --hitcount 50 -j DROP
        done

        # Array of ports to allow
        allowed_ports=(22 80 443 25565 30120 8080 2020)

        # Loop through each port and add the rules
        for port in "${allowed_ports[@]}"; do
            sudo iptables -A INPUT -p tcp --dport $port -j ACCEPT
            sudo ip6tables -A INPUT -p tcp --dport $port -j ACCEPT
        done

        # Drop all other traffic
        sudo iptables -A INPUT -j DROP
        sudo ip6tables -A INPUT -j DROP

        sudo iptables-save > /etc/iptables/rules.v4
        sudo ip6tables-save > /etc/iptables/rules.v6
    }

    installpackages "iptables-persistent"
    firewall_install

    echo "Firewall rules have been successfully configured and saved."
}

case $choice in
    1)
        clear_firewall
        ;;
    2)
        list_firewall
        ;;
    3)
        restart_services
        ;;
    4)
        setup_firewall
        ;;
    5)
        clear
        echo "Exiting..."
        sleep 1
        clear
        exit 0
        ;;
    *)
        echo "Invalid choice. Please enter a number between 1 and 5."
        ;;
esac
